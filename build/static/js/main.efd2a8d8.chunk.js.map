{"version":3,"sources":["components/Person/Person.module.css","components/AddPerson/AddPerson.module.css","App.module.css","components/Person/Person.js","components/AddPerson/AddPerson.js","constants/constants.js","containers/Persons.js","App.js","registerServiceWorker.js","store/reducer.js","index.js"],"names":["module","exports","Person","props","className","classes","onClick","clicked","name","age","AddPerson","Button","personAdded","ADD_PERSON","DELETE_PERSON","Persons","this","persons","map","person","DeletePerson","id","Component","connect","state","dispatch","type","ActionTypes","personID","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","reducer","action","textArray","randomNumber","Math","floor","random","length","randomName","newPerson","concat","filter","store","createStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.efd2a8d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2dOO0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddPerson\":\"AddPerson_AddPerson__pvU8z\",\"Button\":\"AddPerson_Button__3b-9j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2ITmK\"};","import React from \"react\";\n\nimport \"./Person.module.css\";\nimport classes from \"./Person.module.css\";\n\nconst Person = props => (\n  <div className={classes.Person} onClick={props.clicked}>\n    <h1>{props.name}</h1>\n    <p>Age: {props.age}</p>\n  </div>\n);\n\nexport default Person;\n","import React from \"react\";\n\nimport classes from \"./AddPerson.module.css\";\n\nconst AddPerson = props => (\n  <div className={classes.AddPerson}>\n    <button className={classes.Button} onClick={props.personAdded}>\n      Add Person\n    </button>\n  </div>\n);\n\nexport default AddPerson;\n","export const ADD_PERSON = \"ADD_PERSON\";\r\nexport const DELETE_PERSON = \"DELETE_PERSON\";\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Person from \"../components/Person/Person\";\nimport AddPerson from \"../components/AddPerson/AddPerson\";\nimport * as ActionTypes from \"../constants/constants\";\n\nclass Persons extends Component {\n  render() {\n    return (\n      <div>\n        <AddPerson personAdded={this.props.AddPerson} />\n        {this.props.persons.map(person => (\n          <Person\n            key={person.id}\n            name={person.name}\n            age={person.age}\n            clicked={() => this.props.DeletePerson(person.id)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    persons: state.persons,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    AddPerson: () => dispatch({ type: ActionTypes.ADD_PERSON }),\n    DeletePerson: id =>\n      dispatch({ type: ActionTypes.DELETE_PERSON, personID: id }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Persons);\n","import React, { Component } from \"react\";\n\nimport Persons from \"./containers/Persons\";\nimport classes from \"./App.module.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={classes.App}>\n        <h1>Redux exercise</h1>\n        <Persons />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as ActionTypes from \"../constants/constants\";\r\n\r\nconst initialState = {\r\n  persons: [],\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ActionTypes.ADD_PERSON:\r\n      const textArray = [\r\n        \"Boris\",\r\n        \"Natasa\",\r\n        \"Ognjen\",\r\n        \"Marko\",\r\n        \"Nemanja\",\r\n        \"Zeljka\",\r\n        \"Srdjan\",\r\n      ];\r\n      const randomNumber = Math.floor(Math.random() * textArray.length);\r\n      const randomName = textArray[randomNumber];\r\n      const newPerson = {\r\n        id: Math.random(),\r\n        name: randomName,\r\n        age: Math.floor(Math.random() * 40),\r\n      };\r\n      return {\r\n        ...state,\r\n        persons: state.persons.concat(newPerson),\r\n      };\r\n\r\n    case ActionTypes.DELETE_PERSON:\r\n      return {\r\n        ...state,\r\n        persons: state.persons.filter(person => person.id !== action.personID),\r\n      };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.module.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport reducer from \"./store/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}